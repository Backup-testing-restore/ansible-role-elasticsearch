---
- set_fact: manage_file_users=false

- set_fact: manage_file_users=true
  when: es_users is defined and es_users.file is defined and es_users.file.keys() | list | length > 0

#List current users
- name: List Users
  become: yes
  shell: cat {{ es_conf_dir }}/users | awk -F':' '{print $1}'
  register: current_file_users
  when: manage_file_users
  changed_when: False
  check_mode: no

#Remove users
- name: Remove Users
  become: yes
  command: >
    {{es_home}}/bin/elasticsearch-users userdel {{item}}
  with_items: "{{users_to_remove | default([])}}"
  when: manage_file_users
  environment:
    CONF_DIR: "{{ es_conf_dir }}"
    ES_PATH_CONF: "{{ es_conf_dir }}"
    ES_HOME: "{{es_home}}"

#Add users
- name: Add Users
  become: yes
  command: >
    {{es_home}}/bin/elasticsearch-users useradd {{item}} -p {{es_users.file[item].password}}
  with_items: "{{ users_to_add | default([]) }}"
  when: manage_file_users
  no_log: True
  environment:
    CONF_DIR: "{{ es_conf_dir }}"
    ES_PATH_CONF: "{{ es_conf_dir }}"
    ES_HOME: "{{es_home}}"

#Set passwords for all users declared - Required as the useradd will not change existing user passwords
- name: Set User Passwords
  become: yes
  command: >
    {{es_home}}/bin/elasticsearch-users passwd {{ item }} -p {{es_users.file[item].password}}
  with_items: "{{ es_users.file.keys() | list }}"
  when: manage_file_users
  #Currently no easy way to figure out if the password has changed or to know what it currently is so we can skip.
  changed_when: False
  no_log: True
  environment:
    CONF_DIR: "{{ es_conf_dir }}"
    ES_PATH_CONF: "{{ es_conf_dir }}"
    ES_HOME: "{{es_home}}"

- name: set fact users_roles
  set_fact: users_roles={{es_users.file | extract_role_users () }}
  when: manage_file_users

#Copy Roles files
- name: Copy roles.yml File for Instance
  become: yes
  template:
    src: security/roles.yml.j2
    dest: "{{ es_conf_dir }}/roles.yml"
    owner: root
    group: "{{ es_group }}"
    mode: "0660"
    force: yes
  when: es_roles is defined and es_roles.file is defined

#Overwrite users_roles file
- name: Copy User Roles
  become: yes
  template:
    src: security/users_roles.j2
    dest: "{{ es_conf_dir }}/users_roles"
    owner: root
    group: "{{ es_group }}"
    mode: "0660"
    force: yes
  when: manage_file_users and users_roles | length > 0
